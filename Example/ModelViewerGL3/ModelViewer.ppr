program ModelViewer;

//compatibility for FPC
{$IFDEF FPC}
  {$MODE Delphi}
  {$H+}
  {$M+}
  {$codepage utf8}
  {$IFNDEF WINDOWS}
    {$LINKLIB c}
  {$ENDIF}
{$ENDIF}

//for logs
{$APPTYPE CONSOLE}

uses
  {$IFDEF WINDOWS}windows,{$ENDIF}
  classes, sysutils, dglOpenGL, SDL2, Model, ModelMSA, ModelMS3D, ModelFBX, gl3render, glShader, glMath;

type
  clsCamera = record
    xangle, yangle, zangle : double;
    dist : double;
  end;

var
  window: PSDL_Window;
  context: TSDL_GLContext;
  screenWidth: integer = 1024;
  screenHeight: integer = 769;
  running: boolean = true;
  scene1: Tgl3Render;
  show_bones : boolean;
  camera : clsCamera;

  ftick,flasttick: int64;
  PerformanceFrequency: int64;
  gBoneMatLocation: GLint;

  glslsimplevert: TGLSLShader;        // a Vertex Shader
  glslsimplefrag: TGLSLShader;        // a Fragment Shader
  glslsimpleprog: TGLSLProgram;       // a Shader Program

  projection: TglMatrix;
  model: TglMatrix;
  view: TglMatrix;
  modelview: TglMatrix;
  gModelViewLocation: GLint;

//initializes SDL
function InitializeSDL: Boolean;
begin
  Result := false;
  //only the video system is needed
  if SDL_Init(SDL_INIT_VIDEO) = 0 then
    Result := true;

  //SDL_EventState(SDL_MOUSEMOTION, SDL_IGNORE);
  //SDL_SetRelativeMouseMode(SDL_TRUE); //TODO: camera bug when net done in time
end;

procedure InitializeOpenGL;
begin
  InitOpenGL;                   //core-functions
  ReadExtensions;               //Extensions
  ReadImplementationProperties; //Extension-Support-Bools
end;

//init game logic pre render
procedure Init();
var
  i,j: integer;
  gVertexLocation: GLint;
  gColorLocation: GLint;
  gTextureLocation: GLint;
  gTexCoordLocation: GLint;
  gNormalLocation: GLint;


  gUseBonesLocation: GLint;
  gUseTexturesLocation: GLint;

  gBoneIndexLocation: GLint;
  gBoneWeightLocation: GLint;
  gProjectionLocation: GLint;


begin

  //load simple glsl shader
  glslsimpleprog := TGLSLProgram.Create();
  glslsimplevert := TGLSLShader.Create('..\..\shaders\Vertex.vs');
  glslsimplefrag := TGLSLShader.Create('..\..\shaders\Fragment.fs', GL_FRAGMENT_SHADER_ARB);
  glslsimpleprog.Attach(glslsimplevert);
  glslsimpleprog.Attach(glslsimplefrag);
  glslsimpleprog.Link;
  writeln(glslsimpleprog.Log());
  glslsimpleprog.Enable; //Enable once is enough if only one glsl prog is used...

  gProjectionLocation := glslsimpleprog.GetUniformLocation('projectionMatrix');
  gModelViewLocation := glslsimpleprog.GetUniformLocation('modelViewMatrix');
  gTextureLocation := glslsimpleprog.GetUniformLocation('firstTexture');
  gBoneMatLocation := glslsimpleprog.GetUniformLocation('bonemat');

  gUseBonesLocation := glslsimpleprog.GetUniformLocation('useBones');
  gUseTexturesLocation := glslsimpleprog.GetUniformLocation('useTexture');

  gVertexLocation := glslsimpleprog.GetAttribLocation('vertex');
  gNormalLocation := glslsimpleprog.GetAttribLocation('normal');
  gColorLocation := glslsimpleprog.GetAttribLocation('color');
  gBoneIndexLocation := glslsimpleprog.GetAttribLocation('boneindex');
  gBoneWeightLocation := glslsimpleprog.GetAttribLocation('boneweight');

  gTexCoordLocation := glslsimpleprog.GetAttribLocation('texCoord');

  //set camera position
  camera.xangle := 0;//-90.0; //10
  camera.yangle := 0;//-180; //90+45.0; //90
  camera.zangle := 0.0; //0
  camera.dist := 150.0;   //500

  show_bones := true;

  glClearColor(0.0, 0.0, 0.0, 0.0); 	   // Black Background

  glClearDepth(1.0);                       // Depth Buffer Setup
  glEnable(GL_DEPTH_TEST);                 // Enable Depth Buffer
  glDepthFunc(GL_LESS);		           // The Type Of Depth Test To Do

  glEnable(GL_TEXTURE_2D);                 // Enable Texture Mapping

  scene1 := Tgl3Render.Create(nil);

  scene1.AddModel();
  //scene1.Models[0].LoadFromFile('..\..\Models\hog2.txt'); //24fps?
  //scene1.Models[0].LoadFromFile('..\..\Models\ninjat.ms3d');

  //scene1.Models[0].LoadFromFile('c:\projecten\assets\Scorpion\scorpidt.txt');
  //scene1.Models[0].LoadFromFile('c:\projecten\assets\Scorpion\scorpid2006.fbx');

  //scene1.Models[0].LoadFromFile('D:\Reallusion\export\FBX 2006\TempAvatar.fbx');
  //scene1.Models[0].LoadFromFile('D:\Reallusion\export\FBX 2006\testchar1.fbx');

  scene1.Models[0].LoadFromFile('D:\Reallusion\export\FBX 2013\testgr2.fbx');


  //scene1.Models[0].LoadFromFile('..\..\Models\2cubes2006.fbx');
  //scene1.Models[0].LoadFromFile('..\..\Models\2cubes2009.fbx');
  //scene1.Models[0].LoadFromFile('..\..\Models\2cubes2010.fbx');
  //scene1.Models[0].LoadFromFile('..\..\Models\2cubes2011.fbx');
  //scene1.Models[0].LoadFromFile('..\..\Models\2cubes2013.fbx');

  //scene1.Models[0].LoadFromFile('..\..\Models\export6.txt');


  //writeln('*'+scene1.Models[0].Material[0].TextureFilename+'*');
  //writeln('*'+scene1.Models[0].Material[1].TextureFilename+'*');
  //scene1.Models[0].Material[0].HasTexturemap:=false;

  for i:=0 to scene1.Models[0].NumMeshes-1 do
  begin
    writeln(inttostr(i)+' '+scene1.Models[0].Mesh[i].Name);
  end;
  //scene1.Models[0].Mesh[7].Visible:=false;


  //pass attrib info from shade on to vbo
  scene1.VBO.VertexAttribId:=gVertexLocation;
  scene1.VBO.ColorAttribId:=gColorLocation;
  scene1.VBO.NormalAttribId:=gNormalLocation;
  scene1.VBO.TexCoordAttribId:=gTexCoordLocation;
  scene1.VBO.BoneIndexAttribId:=gBoneIndexLocation;
  scene1.VBO.BoneWeightAttribId:=gBoneWeightLocation;

  scene1.BoneMatLocation:=gBoneMatLocation;
  scene1.UseBonesLocation:=gUseBonesLocation;

  scene1.Init; //Init vbo with mesh info

  //Load and set texture/material info
  scene1.UpdateTextures;
  glUniform1i(gTextureLocation, 0); //use the first texture
  glUniform1f(gUseTexturesLocation,1); //use texture coords in shader

  // Set the polygon mode to fill
  glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
  glPolygonMode (GL_BACK, GL_POINTS);

  glEnable (GL_DEPTH_TEST);

  glCullFace (GL_BACK);
  glEnable (GL_CULL_FACE);

  // Calculate the projection matrix and set it
  Frustum(projection,-1.0, 1.0, -1.0, 1.0, 1.0, 1500.0);
  glUniformMatrix4fv(gProjectionLocation, 1, false, @projection);

  // Calculate the model matrix ...
  loadIdentity(model);
  translateMatrix(model,0.0,-85.0,-camera.dist);
  rotateRzRyRxMatrixf(model, camera.xangle, 0, 0);
  rotateRzRyRxMatrixf(model, 0, camera.yangle, 0);
  rotateRzRyRxMatrixf(model, 0, 0, camera.zangle);


  // ... and the view matrix ...
  lookAt(view, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0); //default opengl settings
  // ... to get the final model view matrix
  multMatrix(modelView, view, model);
  glUniformMatrix4fv(gModelViewLocation, 1, false, @modelView);

  //keep track of time
  QueryPerformanceCounter(fLastTick); //lasttime
  QueryPerformanceFrequency(PerformanceFrequency) //frequency
end;

//Event-Handler
procedure HandleEvents;
var
  event: TSDL_Event;
begin

  while SDL_PollEvent(@event) > 0 do
  begin

    case event.type_ of
      SDL_QUITEV: //this only works with one window
        running := false; //stop main-loop

      SDL_KEYDOWN:
        begin
          case event.key.keysym.scancode of
            SDL_SCANCODE_ESCAPE: running:=false; //stop main-loop
          end;
       end;

    end;

  end;
end;

//update game logic pre render
procedure Update();
var
  speed: single;
begin
  QueryPerformanceCounter(ftick); //currentime

  //advance the animation in accordance to
  //elapsed time since last call
  //elapsed time = currentime - lasttime
  //adjust elapsed time with performancefrequency
  //call AdvanceAnimation with elapsedtime * fps


  if scene1.Models[0].NumSkeletons>=1 then
    begin
      speed:=((fTick-fLastTick)/PerformanceFrequency)*scene1.Models[0].Animation[0].AnimFps;
      scene1.Models[0].AdvanceAnimation(speed);
    end;

  camera.yangle:=camera.yangle+0.01;
  if camera.yangle=360 then camera.yangle:=0;

  QueryPerformanceCounter(fLastTick); //lasttime
end;

//Render
procedure Render;
begin

  loadIdentity(model);
  translateMatrix(model,0.0,-85.0,-camera.dist);
  rotateRzRyRxMatrixf(model, camera.xangle, 0, 0);
  rotateRzRyRxMatrixf(model, 0, camera.yangle, 0);
  rotateRzRyRxMatrixf(model, 0, 0, camera.zangle);
  multMatrix(modelView, view, model);
  glUniformMatrix4fv(gModelViewLocation, 1, false, @modelView);

  //Start Drawing
  glViewPort(0,0,screenWidth,screenHeight);
  glClearDepth(1.0);
  glClearColor(130/255,202/255,250/255,1.0); //hard bleu debug background
  glClear(GL_COLOR_BUFFER_BIT or GL_STENCIL_BUFFER_BIT or GL_DEPTH_BUFFER_BIT);

  (*
  scene1.VBO.PreRender;
  scene1.Models[0].Mesh[1].Render;
  scene1.Models[0].Mesh[3].Render;
  scene1.VBO.PostRender;
  *)

  scene1.Render;

  (*
  if(show_bones) AND (scene1.Models[0].NumSkeletons>=1) then
  begin
    glClear( GL_DEPTH_BUFFER_BIT);  // clear z buffer
    scene1.Models[0].RenderSkeleton;  // render bones
  end;
  *)

  // Done
  glFlush(); //for opengl to do its thing
end;

//Cleanup game logic pre render
procedure Cleanup();
begin
  scene1.Free;
  glslsimpleprog.Free();
  glslsimplefrag.Free();
  glslsimplevert.Free();
end;

//Main Application Loop
begin

  {$IFDEF WINDOWS}
    //Force using UTF8
    SetConsoleOutputCP(CP_UTF8);
    SetTextCodePage(Output, CP_UTF8);
    DefaultSystemCodePage := CP_UTF8;
  {$ENDIF}

  window := nil;
  context := nil;

  try
    
	//initialize SDL
    if not InitializeSDL then
    begin
      WriteLn('Couldn''t initialize SDL!');
      Exit;
    end;
    
    //set opengl screen buffer attributes
    SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);
    SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 1);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3 ); //force opengl version
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1 ); //force opengl version
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1); //doublebuffer

    //create the window,
    //caption - first parameter
    //position: 100,100
    //640x480
    //OpenGL-Support
    window := SDL_CreateWindow('OpenGL 3 with SDL ', 100+400, 100, screenWidth, screenHeight, SDL_WINDOW_OPENGL);

    //the opengl-context
    context := SDL_GL_CreateContext(window);
    
	//initialize OpenGL
    InitializeOpenGL;

    SDL_GL_SetSwapInterval(0); //no vsync
    //SDL_FlushEvents(SDL_MOUSEMOTION, SDL_LASTEVENT);
    //SDL_EventState(SDL_MOUSEMOTION, SDL_ENABLE);
    //SDL_SetRelativeMouseMode(SDL_TRUE);

    //Initialize resources and game locic
    Init();
    while running do
      begin
        //Handle events
        HandleEvents;
        //Update game logic
        Update;
        //Draw
        Render;
        //Swap Window
        SDL_GL_SwapWindow(window);
        sleep(1 div 60); //prevent cpu hog
      end;
  finally
    Cleanup();
    //clean up SDL and OpenGL
    SDL_GL_DeleteContext(context);
    SDL_DestroyWindow(window);
    SDL_Quit;
  end;

end.
